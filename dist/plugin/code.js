"use strict";let r="fill",g=!1,e={hasFillStroke:{fill:!1,stroke:!1},colors:{fill:{rgba:[255,255,255,0]},stroke:{rgba:[255,255,255,0]}}};const S=function(){e.hasFillStroke.fill=!1,e.hasFillStroke.stroke=!1,e.colors.fill.rgba=[255,255,255,0],e.colors.stroke.rgba=[255,255,255,0]},k=function(){var u,n;S();const l=["BOOLEAN_OPERATION","COMPONENT","ELLIPSE","FRAME","INSTANCE","LINE","POLYGON","RECTANGLE","STAR","TEXT","VECTOR","SHAPE_WITH_TEXT","HIGHLIGHT"],s=figma.currentPage.selection;if(!s[0])return a("noSelection"),!1;for(const i of s)if(!l.includes(i.type))return a("notSupportedType",i.type),!1;const o=s[0].fills[0],t=s[0].strokes[0];if(!o&&!t)return a("noColorInShape"),!1;if((o==null?void 0:o.type)!=="SOLID"&&(t==null?void 0:t.type)!=="SOLID")return a("noSolidColor"),!1;if((o==null?void 0:o.type)==="SOLID"&&(e.hasFillStroke.fill=!0,e.colors.fill.rgba[0]=o.color.r*255,e.colors.fill.rgba[1]=o.color.g*255,e.colors.fill.rgba[2]=o.color.b*255,e.colors.fill.rgba[3]=Math.round(o.opacity*100)),(t==null?void 0:t.type)==="SOLID"&&(e.hasFillStroke.stroke=!0,e.colors.stroke.rgba[0]=t.color.r*255,e.colors.stroke.rgba[1]=t.color.g*255,e.colors.stroke.rgba[2]=t.color.b*255,e.colors.stroke.rgba[3]=Math.round(t.opacity*100)),s.length>1){let i=0,f=0;for(const h of s)((u=h.fills[0])==null?void 0:u.type)==="SOLID"&&i++,((n=h.strokes[0])==null?void 0:n.type)==="SOLID"&&f++;if(s.length!==i&&s.length!==f)return a("notAllShapesHaveFillOrStroke"),!1;f<i?e.hasFillStroke.stroke=!1:i<f&&(e.hasFillStroke.fill=!1)}return!0},c=function(l=!1){figma.ui.postMessage({shapeInfos:e,currentFillOrStroke:r,shouldRenderColorPickerCanvas:l,message:"new shape color"})},a=function(l,s=""){figma.ui.postMessage({message:"Display UI Message",UIMessageCode:l,nodeType:s})};figma.showUI(__html__,{width:241,height:346,themeColors:!0});const y=function(){k()&&(e.hasFillStroke.fill?r="fill":r="stroke",c(!0))};y();figma.on("selectionchange",()=>{r="fill",k()&&(r==="fill"&&!e.hasFillStroke.fill?r="stroke":r==="stroke"&&!e.hasFillStroke.stroke&&(r="fill"),c(!0))});figma.on("documentchange",l=>{if(g)return;if(l.documentChanges[0].type==="PROPERTY_CHANGE"){const o=l.documentChanges[0].properties[0];if(o==="fills"||o==="strokes"){let t=Object.assign({},e.hasFillStroke);if(!k())return;if(JSON.stringify(t)!==JSON.stringify(e.hasFillStroke)){r==="fill"&&!e.hasFillStroke.fill?r="stroke":r==="stroke"&&!e.hasFillStroke.stroke&&(r="fill"),c(!0);return}r==="fill"&&o==="strokes"||r==="stroke"&&o==="fills"?c():c(!0)}}});let p;figma.ui.onmessage=l=>{if(l.type==="Update shape color"){g=!0;const s=l.newColor[0]/255,o=l.newColor[1]/255,t=l.newColor[2]/255,u=l.newColor[3]/100;let n;const i=r+"s";for(const f of figma.currentPage.selection)i in f&&(n=JSON.parse(JSON.stringify(f[i])),n[0].color.r=s,n[0].color.g=o,n[0].color.b=t,n[0].opacity=u,f[i]=n);p&&clearTimeout(p),p=setTimeout(()=>{g=!1},500)}else l.type==="Sync currentFillOrStroke"&&(r=l.currentFillOrStroke)};
