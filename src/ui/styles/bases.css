:root {
  --base-font-size: 11px;
  --base-border-radius: 2px;
}

* {
  box-sizing: border-box;
}

body {
  margin: 0;
  background-color: var(--figma-color-bg);
  font-family: 'Inter', sans-serif;
  user-select: none;
}

p {
  margin: 0;
}

.select-wrapper,
.input-wrapper {
  display: flex;
  position: relative;
  width: 100%;
  height: 28px;
  align-items: center;
}

.input-wrapper {
  border: 1px solid transparent;
  border-radius: var(--base-border-radius);
}

.input-wrapper:hover,
select:hover {
  border: 1px solid var(--figma-color-border, rgba(0, 0, 0, 0.1));
}

.input-wrapper:focus-within {
  border: 1px solid var(--figma-color-border-selected);
  outline: 1px solid var(--figma-color-border-selected);
}

.select-wrapper::before {
  display: block;
  position: absolute;
  top: 2px;
  right: 1px;
  pointer-events: none;
}
.figma-light .select-wrapper::before {
  content: url("data:image/svg+xml,%3Csvg width='16' height='24' viewBox='0 0 16 24' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Crect width='16' height='24' fill='white' style='fill:white;fill:white;fill-opacity:1;'/%3E%3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M7.10001 13.508L4.10001 10.508L4.80801 9.79999L7.45401 12.447L10.1 9.79999L10.808 10.508L7.80801 13.508L7.45401 13.861L7.10001 13.508Z' fill='%23888888' style='fill:%23888888;fill:color(display-p3 0.5333 0.5333 0.5333);fill-opacity:1;'/%3E%3C/svg%3E%0A");
}
.figma-dark .select-wrapper::before {
  content: url("data:image/svg+xml,%3Csvg width='16' height='24' viewBox='0 0 16 24' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Crect width='16' height='24' fill='%232C2C2C' style='fill:%232C2C2C;fill:color(display-p3 0.1725 0.1725 0.1725);fill-opacity:1;'/%3E%3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M7.10001 13.508L4.10001 10.508L4.80801 9.79999L7.45401 12.447L10.1 9.79999L10.808 10.508L7.80801 13.508L7.45401 13.861L7.10001 13.508Z' fill='%23A8A8A8' style='fill:%23A8A8A8;fill:color(display-p3 0.6600 0.6600 0.6600);fill-opacity:1;'/%3E%3C/svg%3E%0A");
}

select,
input {
  width: 100%;
  height: 100%;
  padding: 7px 4px;
  font-family: 'Inter', sans-serif;
  font-size: var(--base-font-size);
  font-weight: 400;
  line-height: 100%;
  color: var(--figma-color-text);
  background-color: transparent;
  cursor: default;
}
input {
  border: 0;
  border-right: 1px solid transparent;
}
select {
  /* We set the height to 100% only for the select and not the input because it would make a 1 px gap between the outer border of input-wrapper and the left borders of the nested input when hovering. */
  height: 100%;
  border: 1px solid transparent;
}
select:focus,
input:focus {
  outline: none;
}
/* We don't use disabled attribute because of a weird bug when using atom state in ColorValueInputs to conditionaly set disabled state on inputs. In short, if hte input was selected, making it disabled with the attribute will make it selected again after render, so we will have the content of the input selected while being grayed out. The fix here is to use this class with tabIndex changes, see in ColorValueInputs(). */
input.disabled {
  pointer-events: none;
  opacity: 0.5;
}

select {
  appearance: none;
}
